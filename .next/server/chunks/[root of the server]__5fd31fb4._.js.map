{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Administrator/Desktop/restoran/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\r\n  });\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO;AAC1E;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Administrator/Desktop/restoran/src/lib/auth.ts"],"sourcesContent":["import { PrismaAdapter } from \"@auth/prisma-adapter\";\r\nimport { NextAuthOptions } from \"next-auth\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { compare } from \"bcryptjs\";\r\nimport { prisma } from \"@/lib/prisma\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  adapter: PrismaAdapter(prisma),\r\n  session: {\r\n    strategy: \"jwt\",\r\n    maxAge: 30 * 24 * 60 * 60, // 30 gün\r\n  },\r\n  pages: {\r\n    signIn: \"/giris\",\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Şifre\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        const user = await prisma.user.findUnique({\r\n          where: {\r\n            email: credentials.email,\r\n          },\r\n        });\r\n\r\n        if (!user || !user.password) {\r\n          return null;\r\n        }\r\n\r\n        const isPasswordValid = await compare(\r\n          credentials.password,\r\n          user.password\r\n        );\r\n\r\n        if (!isPasswordValid) {\r\n          return null;\r\n        }\r\n        \r\n        console.log(\"Giriş başarılı. Kullanıcı:\", {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name,\r\n          role: user.role\r\n        });\r\n\r\n        return {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name,\r\n          role: user.role,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user, account }) {\r\n      console.log(\"JWT callback çalışıyor\");\r\n      console.log(\"User bilgisi:\", user);\r\n      console.log(\"Önceki token:\", token);\r\n      \r\n      if (user) {\r\n        // Kullanıcı ilk kez giriş yaptığında\r\n        token.id = user.id;\r\n        token.role = user.role;\r\n        \r\n        console.log(\"JWT'ye yeni bilgiler eklendi:\", token);\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      console.log(\"Session callback çalışıyor\");\r\n      console.log(\"Token:\", token);\r\n      \r\n      if (token) {\r\n        // JWT'den gelen bilgileri session'a aktar\r\n        session.user.id = token.id as string;\r\n        session.user.role = token.role as string;\r\n        \r\n        console.log(\"Session güncellenmiş hali:\", session);\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  debug: process.env.NODE_ENV === \"development\",\r\n};\r\n\r\nexport const getAuthSession = () => getServerSession(authOptions); "],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AACA;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAS,MAAM;gBAAW;YAC/C;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAClC,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,QAAQ,GAAG,CAAC,8BAA8B;oBACxC,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,MAAM,KAAK,IAAI;gBACjB;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,QAAQ,GAAG,CAAC;YACZ,QAAQ,GAAG,CAAC,iBAAiB;YAC7B,QAAQ,GAAG,CAAC,iBAAiB;YAE7B,IAAI,MAAM;gBACR,qCAAqC;gBACrC,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;gBAEtB,QAAQ,GAAG,CAAC,iCAAiC;YAC/C;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,GAAG,CAAC;YACZ,QAAQ,GAAG,CAAC,UAAU;YAEtB,IAAI,OAAO;gBACT,0CAA0C;gBAC1C,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAE9B,QAAQ,GAAG,CAAC,8BAA8B;YAC5C;YACA,OAAO;QACT;IACF;IACA,OAAO,oDAAyB;AAClC;AAEO,MAAM,iBAAiB,IAAM,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Administrator/Desktop/restoran/src/app/api/admin/products/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/lib/auth\";\n\nconst prisma = new PrismaClient();\n\n// Tüm ürünleri getir\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session || session.user.role !== \"ADMIN\") {\n      return NextResponse.json({ error: \"Yetkisiz erişim\" }, { status: 401 });\n    }\n    \n    const products = await prisma.$queryRaw`\n      SELECT p.*, c.name as categoryName,\n        CASE WHEN (SELECT COUNT(*) FROM productvariation WHERE productId = p.id) > 0 THEN true ELSE false END as hasVariations\n      FROM product p\n      LEFT JOIN category c ON p.categoryId = c.id\n      ORDER BY p.createdAt DESC\n    `;\n    \n    // Ürünleri ve varyasyonları düzenle\n    const formattedProducts = [];\n    \n    for (const row of products as any[]) {\n      const product: any = {\n        id: row.id,\n        name: row.name,\n        description: row.description,\n        price: row.price,\n        basePrice: row.basePrice,\n        hasStock: row.hasStock,\n        stockQuantity: row.stockQuantity,\n        inStock: row.stockQuantity > 0,\n        image: row.image,\n        ingredients: row.ingredients ? (typeof row.ingredients === 'string' ? JSON.parse(row.ingredients) : row.ingredients) : [],\n        createdAt: row.createdAt,\n        updatedAt: row.updatedAt,\n        hasVariations: row.hasVariations === 1 || row.hasVariations === true,\n        category: row.categoryId && row.categoryName ? {\n          id: row.categoryId,\n          name: row.categoryName,\n        } : null\n      };\n      \n      // Varyasyon bilgilerini getir\n      if (product.hasVariations) {\n        const variations = await prisma.$queryRaw`\n          SELECT v.id, v.name, COUNT(vo.id) as optionCount\n          FROM variation v\n          JOIN productvariation pv ON v.id = pv.variationId\n          JOIN variationoption vo ON v.id = vo.variationId\n          WHERE pv.productId = ${row.id}\n          GROUP BY v.id, v.name\n        `;\n        \n        product.variations = variations;\n      }\n      \n      formattedProducts.push(product);\n    }\n    \n    return NextResponse.json({ products: formattedProducts });\n  } catch (error) {\n    console.error(\"Ürünler alınırken hata:\", error);\n    return NextResponse.json(\n      { error: \"Ürünler alınırken bir hata oluştu\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Yeni ürün oluştur\nexport async function POST(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session || session.user.role !== \"ADMIN\") {\n      return NextResponse.json({ error: \"Yetkisiz erişim\" }, { status: 401 });\n    }\n    \n    const body = await request.json();\n    const {\n      name,\n      description,\n      price,\n      basePrice,\n      categoryId,\n      hasStock,\n      stockQuantity,\n      image,\n      ingredients,\n      hasVariations,\n      variationIds,\n      noIndex\n    } = body;\n\n    // Validasyon\n    if (!name) {\n      return NextResponse.json(\n        { error: \"Ürün adı zorunludur\" },\n        { status: 400 }\n      );\n    }\n\n    if (hasVariations) {\n      if (!basePrice || parseFloat(basePrice.toString()) <= 0) {\n        return NextResponse.json(\n          { error: \"Geçerli bir temel fiyat girmelisiniz\" },\n          { status: 400 }\n        );\n      }\n      \n      if (!variationIds || !Array.isArray(variationIds) || variationIds.length === 0) {\n        return NextResponse.json(\n          { error: \"En az bir varyasyon seçmelisiniz\" },\n          { status: 400 }\n        );\n      }\n    } else {\n      if (!price || parseFloat(price.toString()) <= 0) {\n        return NextResponse.json(\n          { error: \"Geçerli bir fiyat girmelisiniz\" },\n          { status: 400 }\n        );\n      }\n    }\n\n    if (!categoryId) {\n      return NextResponse.json(\n        { error: \"Kategori seçimi zorunludur\" },\n        { status: 400 }\n      );\n    }\n\n    if (hasStock && (stockQuantity === undefined || parseInt(stockQuantity.toString()) < 0)) {\n      return NextResponse.json(\n        { error: \"Geçerli bir stok miktarı girmelisiniz\" },\n        { status: 400 }\n      );\n    }\n\n    // Yeni ürün oluştur\n    const productId = uuidv4();\n    \n    // Ürünü ekle\n    await prisma.$executeRaw`\n      INSERT INTO product (\n        id, name, description, price, basePrice, categoryId, hasStock, stockQuantity, \n        image, ingredients, noIndex, slug, updatedAt, createdAt\n      ) VALUES (\n        ${productId}, \n        ${name}, \n        ${description || \"\"}, \n        ${hasVariations ? 0 : parseFloat(price)}, \n        ${hasVariations ? parseFloat(basePrice) : 0}, \n        ${categoryId}, \n        ${hasStock}, \n        ${hasStock ? parseInt(stockQuantity) : 0}, \n        ${image || \"\"}, \n        ${JSON.stringify(ingredients || [])},\n        ${noIndex === false ? false : true},\n        ${body.slug || name.toLowerCase().replace(/\\s+/g, \"-\")},\n        NOW(), \n        NOW()\n      )\n    `;\n    \n    // Varyasyonlu ürünse varyasyonları ekle\n    if (hasVariations && variationIds.length > 0) {\n      for (const variationId of variationIds) {\n        const pvId = uuidv4();\n        await prisma.$executeRaw`\n          INSERT INTO productvariation (id, productId, variationId, createdAt, updatedAt)\n          VALUES (${pvId}, ${productId}, ${variationId}, NOW(), NOW())\n        `;\n      }\n    }\n\n    // Oluşturulan ürünü getir\n    const product = await prisma.$queryRaw`\n      SELECT p.*, c.name as categoryName\n      FROM product p\n      LEFT JOIN category c ON p.categoryId = c.id\n      WHERE p.id = ${productId}\n    `;\n\n    let variations: any[] = [];\n    if (hasVariations) {\n      variations = await prisma.$queryRaw`\n        SELECT v.id, v.name \n        FROM variation v\n        JOIN productvariation pv ON v.id = pv.variationId\n        WHERE pv.productId = ${productId}\n      ` as any[];\n    }\n\n    return NextResponse.json(\n      { \n        message: \"Ürün başarıyla oluşturuldu\", \n        product: { \n          ...(product as any[])[0], \n          variations,\n          category: (product as any[])[0].categoryId && (product as any[])[0].categoryName ? {\n            id: (product as any[])[0].categoryId,\n            name: (product as any[])[0].categoryName,\n          } : null\n        } \n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Ürün oluşturulurken hata:\", error);\n    return NextResponse.json(\n      { error: \"Ürün oluşturulurken bir hata oluştu\" },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}