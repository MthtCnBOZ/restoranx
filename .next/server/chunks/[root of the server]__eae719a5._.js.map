{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Administrator/Desktop/restoran/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\r\n  });\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO;AAC1E;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Administrator/Desktop/restoran/src/lib/auth.ts"],"sourcesContent":["import { PrismaAdapter } from \"@auth/prisma-adapter\";\r\nimport { NextAuthOptions } from \"next-auth\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { compare } from \"bcryptjs\";\r\nimport { prisma } from \"@/lib/prisma\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  adapter: PrismaAdapter(prisma),\r\n  session: {\r\n    strategy: \"jwt\",\r\n    maxAge: 30 * 24 * 60 * 60, // 30 gün\r\n  },\r\n  pages: {\r\n    signIn: \"/giris\",\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Şifre\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        const user = await prisma.user.findUnique({\r\n          where: {\r\n            email: credentials.email,\r\n          },\r\n        });\r\n\r\n        if (!user || !user.password) {\r\n          return null;\r\n        }\r\n\r\n        const isPasswordValid = await compare(\r\n          credentials.password,\r\n          user.password\r\n        );\r\n\r\n        if (!isPasswordValid) {\r\n          return null;\r\n        }\r\n        \r\n        console.log(\"Giriş başarılı. Kullanıcı:\", {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name,\r\n          role: user.role\r\n        });\r\n\r\n        return {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name,\r\n          role: user.role,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user, account }) {\r\n      console.log(\"JWT callback çalışıyor\");\r\n      console.log(\"User bilgisi:\", user);\r\n      console.log(\"Önceki token:\", token);\r\n      \r\n      if (user) {\r\n        // Kullanıcı ilk kez giriş yaptığında\r\n        token.id = user.id;\r\n        token.role = user.role;\r\n        \r\n        console.log(\"JWT'ye yeni bilgiler eklendi:\", token);\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      console.log(\"Session callback çalışıyor\");\r\n      console.log(\"Token:\", token);\r\n      \r\n      if (token) {\r\n        // JWT'den gelen bilgileri session'a aktar\r\n        session.user.id = token.id as string;\r\n        session.user.role = token.role as string;\r\n        \r\n        console.log(\"Session güncellenmiş hali:\", session);\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  debug: process.env.NODE_ENV === \"development\",\r\n};\r\n\r\nexport const getAuthSession = () => getServerSession(authOptions); "],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AACA;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAS,MAAM;gBAAW;YAC/C;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAClC,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,QAAQ,GAAG,CAAC,8BAA8B;oBACxC,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,MAAM,KAAK,IAAI;gBACjB;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,QAAQ,GAAG,CAAC;YACZ,QAAQ,GAAG,CAAC,iBAAiB;YAC7B,QAAQ,GAAG,CAAC,iBAAiB;YAE7B,IAAI,MAAM;gBACR,qCAAqC;gBACrC,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;gBAEtB,QAAQ,GAAG,CAAC,iCAAiC;YAC/C;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,GAAG,CAAC;YACZ,QAAQ,GAAG,CAAC,UAAU;YAEtB,IAAI,OAAO;gBACT,0CAA0C;gBAC1C,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAE9B,QAAQ,GAAG,CAAC,8BAA8B;YAC5C;YACA,OAAO;QACT;IACF;IACA,OAAO,oDAAyB;AAClC;AAEO,MAAM,iBAAiB,IAAM,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Administrator/Desktop/restoran/src/app/api/admin/extras/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"@/lib/auth\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Tüm ekstra malzemeleri getir\r\nexport async function GET() {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session || session.user.role !== \"ADMIN\") {\r\n      return NextResponse.json({ error: \"Yetkisiz erişim\" }, { status: 401 });\r\n    }\r\n    \r\n    const extras = await prisma.extra.findMany({\r\n      orderBy: {\r\n        createdAt: \"desc\",\r\n      },\r\n    });\r\n\r\n    return NextResponse.json({ extras });\r\n  } catch (error) {\r\n    console.error(\"Ekstra malzemeler alınırken hata:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Ekstra malzemeler alınırken bir hata oluştu\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Yeni ekstra malzeme oluştur\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session || session.user.role !== \"ADMIN\") {\r\n      return NextResponse.json({ error: \"Yetkisiz erişim\" }, { status: 401 });\r\n    }\r\n    \r\n    const body = await request.json();\r\n    const { name, price } = body;\r\n\r\n    // Validasyon\r\n    if (!name || !price) {\r\n      return NextResponse.json(\r\n        { error: \"İsim ve fiyat zorunludur\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Yeni ekstra malzeme oluştur\r\n    const extra = await prisma.extra.create({\r\n      data: {\r\n        id: uuidv4(),\r\n        name,\r\n        price: parseFloat(price),\r\n        updatedAt: new Date(),\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { message: \"Ekstra malzeme başarıyla oluşturuldu\", extra },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Ekstra malzeme oluşturulurken hata:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Ekstra malzeme oluşturulurken bir hata oluştu\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAGxB,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,oHAAA,CAAA,cAAW;QAElD,IAAI,CAAC,WAAW,QAAQ,IAAI,CAAC,IAAI,KAAK,SAAS;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,QAAQ,CAAC;YACzC,SAAS;gBACP,WAAW;YACb;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8C,GACvD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,oHAAA,CAAA,cAAW;QAElD,IAAI,CAAC,WAAW,QAAQ,IAAI,CAAC,IAAI,KAAK,SAAS;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;QAExB,aAAa;QACb,IAAI,CAAC,QAAQ,CAAC,OAAO;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,8BAA8B;QAC9B,MAAM,QAAQ,MAAM,OAAO,KAAK,CAAC,MAAM,CAAC;YACtC,MAAM;gBACJ,IAAI,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD;gBACT;gBACA,OAAO,WAAW;gBAClB,WAAW,IAAI;YACjB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAwC;QAAM,GACzD;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgD,GACzD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}